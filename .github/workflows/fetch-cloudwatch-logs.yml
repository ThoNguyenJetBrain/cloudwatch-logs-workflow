name: Fetch CloudWatch Error Logs -V2

on:
  workflow_dispatch:
    inputs:
      max_items:
        description: 'Số lượng items tối đa trả về'
        required: true
        default: '10'
      search_string:
        description: 'Chuỗi cần tìm trong @message'
        required: true
      start_time:
        description: 'Thời gian bắt đầu (YYYY-MM-DD HH:MM:SS UTC)'
        required: true
      end_time:
        description: 'Thời gian kết thúc (YYYY-MM-DD HH:MM:SS UTC)'
        required: true

jobs:
  fetch-cloudwatch-logs:
    runs-on: ubuntu-latest
    outputs:
      formatted_json: ${{ steps.format_logs.outputs.formatted_json }}

    steps:
      - name: Debug Environment variables
        run: env

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1

      - name: Convert Start Time and End Time to Epoch
        run: |
          START_TIME="${{ github.event.inputs.start_time }}"
          END_TIME="${{ github.event.inputs.end_time }}"
          START_EPOCH=$(date -d "$START_TIME" +%s)
          END_EPOCH=$(date -d "$END_TIME" +%s)
          echo "START_EPOCH=$START_EPOCH" >> $GITHUB_ENV
          echo "END_EPOCH=$END_EPOCH" >> $GITHUB_ENV

      - name: Fetch CloudWatch Logs
        run: |
          LOG_GROUP_NAME="/aws/lambda/test-S3-lambda-first"
          SEARCH_STRING="${{ github.event.inputs.search_string }}"
          MAX_ITEMS="${{ github.event.inputs.max_items }}"
          ESCAPED_SEARCH_STRING=$(echo "$SEARCH_STRING" | sed 's/"/\\"/g')
          QUERY="fields @timestamp, @message | filter (@message like '${ESCAPED_SEARCH_STRING}') | sort @timestamp desc | limit ${MAX_ITEMS}"
          QUERY_ID=$(aws logs start-query --log-group-name "$LOG_GROUP_NAME" --query-string "$QUERY" --start-time "$START_EPOCH" --end-time "$END_EPOCH" --query 'queryId' --output text)
          echo "QUERY_ID=$QUERY_ID" >> $GITHUB_ENV
          for i in {1..24}; do  
            QUERY_STATUS=$(aws logs get-query-results --query-id "$QUERY_ID" --query 'status' --output text)
            if [[ "$QUERY_STATUS" == "Complete" ]]; then
              break
            elif [[ "$QUERY_STATUS" == "Failed" || "$QUERY_STATUS" == "Cancelled" ]]; then
              echo "❌ ERROR: Query failed or was cancelled!"
              exit 1
            fi
            sleep 5
          done
          RESULTS_JSON=$(aws logs get-query-results --query-id "$QUERY_ID")
          LOG_RESULTS=$(echo "$RESULTS_JSON" | jq -c '.results')
          echo "LOG_RESULTS=$LOG_RESULTS" >> $GITHUB_ENV

      - name: Format CloudWatch Logs for Slack
        id: format_logs
        run: |
          LOG_RESULTS_JSON=$(echo '${{ env.LOG_RESULTS }}' | jq -c '.')

          FORMATTED_JSON=$(echo '${{ env.LOG_RESULTS }}' | jq -c '
          map(
          map({ (.field): .value })  # Biến mỗi cặp field-value thành object
          | add                      # Gom tất cả object trong mảng con thành một object duy nhất
          ) | map({
            timestamp: (.["@timestamp"] // ""),
            message: (.["@message"] | fromjson? // .["@message"]),  # Xử lý JSON trong message nếu có
            ptr: (.["@ptr"] // "")
          })')

          echo "formatted_json=$FORMATTED_JSON" >> $GITHUB_OUTPUT
          echo "LOG_RESULTS_JSON=$LOG_RESULTS_JSON"
          echo "FORMATTED_JSON=$FORMATTED_JSON"


  send-to-slack:
    needs: fetch-cloudwatch-logs
    uses: ./.github/workflows/common.yml
    with:
      color: "#FF0000"
      message: ${{ needs.fetch-cloudwatch-logs.outputs.formatted_json }}
      # message: "[{ascasc}]"
      title: "CloudWatch Error Logs"
    secrets:
      SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
