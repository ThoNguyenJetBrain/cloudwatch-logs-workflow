name: Toggle EventBridge Scheduler Schedule

on:
  workflow_dispatch:
    inputs:
      rule_name:
        description: 'Select the EventBridge Scheduler Schedule to toggle'
        required: true
        type: choice
        options:
          - placeholder-schedule  # Giá trị mặc định, sẽ được thay thế sau khi chạy workflow phụ
      rule_state:
        description: 'State to set for the schedule (ENABLED or DISABLED)'
        required: true
        type: choice
        options:
          - ENABLED
          - DISABLED
        default: 'ENABLED'

env:
  AWS_REGION: us-east-1  # Thay bằng region của bạn
  SCHEDULE_GROUP: default  # Thay bằng tên schedule group của bạn

permissions:
  contents: read
  id-token: write  # Cần cho OIDC authentication
  actions: read   # Cần để truy cập artifact

jobs:
  toggle-rule:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rule: ${{ fromJson(needs.prepare.outputs.rules).rules }}
      fail-fast: true
      max-parallel: 1  # Chỉ chạy job cho schedule được chọn

    needs: prepare

    if: matrix.rule == github.event.inputs.rule_name

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-role  # Thay bằng ARN của IAM role
          aws-region: ${{ env.AWS_REGION }}

      - name: Download Schedules Artifact
        uses: actions/download-artifact@v4
        with:
          name: scheduler-schedules
          path: .

      - name: Toggle EventBridge Scheduler Schedule
        run: |
          SCHEDULE_NAME="${{ matrix.rule }}"
          SCHEDULE_STATE="${{ github.event.inputs.rule_state }}"
          echo "Setting schedule $SCHEDULE_NAME to state $SCHEDULE_STATE"
          aws scheduler update-schedule \
            --name "$SCHEDULE_NAME" \
            --group-name "${{ env.SCHEDULE_GROUP }}" \
            --state "$SCHEDULE_STATE" \
            --schedule-expression "$(aws scheduler get-schedule --name "$SCHEDULE_NAME" --group-name "${{ env.SCHEDULE_GROUP }}" --query 'ScheduleExpression' --output text)" \
            --target "$(aws scheduler get-schedule --name "$SCHEDULE_NAME" --group-name "${{ env.SCHEDULE_GROUP }}" --query 'Target' --output json)" \
            --flexible-time-window "{\"Mode\": \"OFF\"}" \
            --region "${{ env.AWS_REGION }}"
          echo "Schedule $SCHEDULE_NAME has been set to $SCHEDULE_STATE"

  prepare:
    runs-on: ubuntu-latest
    outputs:
      rules: ${{ steps.get-rules.outputs.rules }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Schedules Artifact
        uses: actions/download-artifact@v4
        with:
          name: scheduler-schedules
          path: .

      - name: Read Schedules JSON
        id: get-rules
        run: |
          RULES=$(cat rules.json)
          echo "rules=$RULES" >> $GITHUB_OUTPUT